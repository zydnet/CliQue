// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Prisma schema for GroupCart
// Entities: User, Vendor, Product, GroupOrder, GroupMember, Payment, Session

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  firstName String
  lastName  String
  password  String
  role      Role
  phone     String?
  street    String?
  city      String?
  state     String?
  pincode   String?
  country   String?
  landmark  String?
  lat       Float?
  lng       Float?
  avatar    String?
  verified  Boolean  @default(false)
  vendors   Vendor[]
  groupMembers GroupMember[]
  sessions  Session[]
  createdGroupOrders GroupOrder[] @relation("UserCreatedGroupOrders")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  customer
  vendor
  admin
}

model Vendor {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @unique
  businessName String
  description  String?
  logoUrl      String?
  street       String?
  city         String?
  state        String?
  pincode      String?
  country      String?
  landmark     String?
  lat          Float?
  lng          Float?
  verified     Boolean  @default(false)
  rating       Float    @default(0)
  totalOrders  Int      @default(0)
  gstNumber    String?
  fssaiNumber  String?
  products     Product[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Product {
  id            String   @id @default(uuid())
  vendor        Vendor   @relation(fields: [vendorId], references: [id])
  vendorId      String
  name          String
  description   String?
  imageUrls     String[]
  basePrice     Float
  groupPrice    Float
  category      String?
  inventoryCount Int
  minGroupSize  Int
  maxGroupSize  Int
  active        Boolean  @default(true)
  unit          String
  tags          String[]
  nutritionInfo String?
  certifications String[]
  groupOrders   GroupOrder[]
}

model GroupOrder {
  id            String   @id @default(uuid())
  product       Product  @relation(fields: [productId], references: [id])
  productId     String
  creator       User     @relation("UserCreatedGroupOrders", fields: [creatorId], references: [id])
  creatorId     String
  title         String
  description   String?
  targetCount   Int
  currentCount  Int      @default(0)
  pricePerItem  Float
  startDate     DateTime
  endDate       DateTime
  status        GroupOrderStatus
  street        String?
  city          String?
  state         String?
  pincode       String?
  country       String?
  landmark      String?
  lat           Float?
  lng           Float?
  members       GroupMember[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deliveryDate  DateTime?
  pickupLocation String?
  shippingCost  Float?
}

enum GroupOrderStatus {
  active
  completed
  cancelled
  expired
}

model GroupMember {
  id             String   @id @default(uuid())
  groupOrder     GroupOrder @relation(fields: [groupOrderId], references: [id])
  groupOrderId   String
  user           User      @relation(fields: [userId], references: [id])
  userId         String
  quantity       Int
  paymentStatus  PaymentStatus
  payment        Payment?
  joinedAt       DateTime @default(now())
}

enum PaymentStatus {
  pending
  authorized
  captured
  failed
}

model Payment {
  id                String   @id @default(uuid())
  groupMember       GroupMember @relation(fields: [groupMemberId], references: [id])
  groupMemberId     String   @unique
  razorpayPaymentId String?
  amount            Float
  status            String
  createdAt         DateTime @default(now())
  capturedAt        DateTime?
}


model Session {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
